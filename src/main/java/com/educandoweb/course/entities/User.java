package com.educandoweb.course.entities;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonIgnore;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;

@Entity                     // BANCO H2 É UM BANCO RELACIONAL EM MEMÓRIA 
@Table(name = "tb_user")    // RENOMEIO A TABELA USER PARA TB_USER POIS USER É UMA PALAVRA RESERVADA DO BANCO H2
public class User implements Serializable {
	private static final long serialVersionUID = 1L;
	
	@Id   //estes 2 @ é para geração automática da chave Id e dizer que é Banco de Dados
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	private String name;
	private String email;
	private String phone;
	private String password;
	
	@JsonIgnore  // faz com que eu não traga todos os pedidos dos clientes - evita o loop nas consultas 
	@OneToMany(mappedBy = "client")  // um usuário tem muitos pedidos indexados pelo client
	private List<Order> orders = new ArrayList<>();
	
	
	public User() {
	}
	
	public User(Long id, String name, String email, String phone, String password) {
		super();
		this.id = id;
		this.name = name;
		this.email = email;
		this.phone = phone;
		this.password = password;
	}

	public long getId() {
		return id;
	}
	public void setId(long id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public String getPhone() {
		return phone;
	}
	public void setPhone(String phone) {
		this.phone = phone;
	}
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}

	public List<Order> getOrders() {
		return orders;
	}
	
	
	@Override
	public int hashCode() {
		return Objects.hash(id);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		User other = (User) obj;
		return id == other.id;
	}

	@Override
	public String toString() {
		return "User [id=" + id + ", name=" + name + ", email=" + email + ", phone=" + phone + ", password=" + password
				+ "]";
	}

	
}

/*  SQL QUE ELE GERA PARA CLIAR A TABELA USER
 
 Hibernate: 
    drop table if exists tb_user cascade 
Hibernate: 
    create table tb_user (
        id bigint generated by default as identity,
        email varchar(255),
        name varchar(255),
        password varchar(255),
        phone varchar(255),
        primary key (id)
    )
*/    
  
